use num_enum::{FromPrimitive, IntoPrimitive};

#[repr(u8)]
#[derive(Debug, Copy, Clone, FromPrimitive, IntoPrimitive)]
pub enum Opcode {
    BrkImp = 0x00,
    OraIndX = 0x01,
    Illegal02 = 0x02,
    Illegal03 = 0x03,
    Illegal04 = 0x04,
    OraZp = 0x05,
    AslZp = 0x06,
    Illegal07 = 0x07,
    PhpImp = 0x08,
    OraImm = 0x09,
    AslAcc = 0x0A,
    Illegal0B = 0x0B,
    Illegal0C = 0x0C,
    OraAbs = 0x0D,
    AslAbs = 0x0E,
    Illegal0F = 0x0F,
    BplRel = 0x10,
    OraIndY = 0x11,
    Illegal12 = 0x12,
    Illegal13 = 0x13,
    Illegal14 = 0x14,
    OraZpX = 0x15,
    AslZpX = 0x16,
    Illegal17 = 0x17,
    ClcImp = 0x18,
    OraAbsY = 0x19,
    Illegal1A = 0x1A,
    Illegal1B = 0x1B,
    Illegal1C = 0x1C,
    OraAbsX = 0x1D,
    AslAbsX = 0x1E,
    Illegal1F = 0x1F,
    JsrAbs = 0x20,
    AndIndX = 0x21,
    Illegal22 = 0x22,
    Illegal23 = 0x23,
    BitZp = 0x24,
    AndZp = 0x25,
    RolZp = 0x26,
    Illegal27 = 0x27,
    PlpImp = 0x28,
    AndImm = 0x29,
    RolAcc = 0x2A,
    Illegal2B = 0x2B,
    BitAbs = 0x2C,
    AndAbs = 0x2D,
    RolAbs = 0x2E,
    Illegal2F = 0x2F,
    BmiRel = 0x30,
    AndIndY = 0x31,
    Illegal32 = 0x32,
    Illegal33 = 0x33,
    Illegal34 = 0x34,
    AndZpX = 0x35,
    RolZpX = 0x36,
    Illegal37 = 0x37,
    SecImp = 0x38,
    AndAbsY = 0x39,
    Illegal3A = 0x3A,
    Illegal3B = 0x3B,
    Illegal3C = 0x3C,
    AndAbsX = 0x3D,
    RolAbsX = 0x3E,
    Illegal3F = 0x3F,
    RtiImp = 0x40,
    EorIndX = 0x41,
    Illegal42 = 0x42,
    Illegal43 = 0x43,
    Illegal44 = 0x44,
    EorZp = 0x45,
    LsrZp = 0x46,
    Illegal47 = 0x47,
    PhaImp = 0x48,
    EorImm = 0x49,
    LsrAcc = 0x4A,
    Illegal4B = 0x4B,
    JmpAbs = 0x4C,
    EorAbs = 0x4D,
    LsrAbs = 0x4E,
    Illegal4F = 0x4F,
    BvcRel = 0x50,
    EorIndY = 0x51,
    Illegal52 = 0x52,
    Illegal53 = 0x53,
    Illegal54 = 0x54,
    EorZpX = 0x55,
    LsrZpX = 0x56,
    Illegal57 = 0x57,
    CliImp = 0x58,
    EorAbsY = 0x59,
    Illegal5A = 0x5A,
    Illegal5B = 0x5B,
    Illegal5C = 0x5C,
    EorAbsX = 0x5D,
    LsrAbsX = 0x5E,
    Illegal5F = 0x5F,
    RtsImp = 0x60,
    AdcIndX = 0x61,
    Illegal62 = 0x62,
    Illegal63 = 0x63,
    Illegal64 = 0x64,
    AdcZp = 0x65,
    RorZp = 0x66,
    Illegal67 = 0x67,
    PlaImp = 0x68,
    AdcImm = 0x69,
    RorAcc = 0x6A,
    Illegal6B = 0x6B,
    JmpInd = 0x6C,
    AdcAbs = 0x6D,
    RorAbs = 0x6E,
    Illegal6F = 0x6F,
    BvsRel = 0x70,
    AdcIndY = 0x71,
    Illegal72 = 0x72,
    Illegal73 = 0x73,
    Illegal74 = 0x74,
    AdcZpX = 0x75,
    RorZpX = 0x76,
    Illegal77 = 0x77,
    SeiImp = 0x78,
    AdcAbsY = 0x79,
    Illegal7A = 0x7A,
    Illegal7B = 0x7B,
    Illegal7C = 0x7C,
    AdcAbsX = 0x7D,
    RorAbsX = 0x7E,
    Illegal7F = 0x7F,
    Illegal80 = 0x80,
    StaIndX = 0x81,
    Illegal82 = 0x82,
    Illegal83 = 0x83,
    StyZp = 0x84,
    StaZp = 0x85,
    StxZp = 0x86,
    Illegal87 = 0x87,
    DeyImp = 0x88,
    Illegal89 = 0x89,
    TxaImp = 0x8A,
    Illegal8B = 0x8B,
    StyAbs = 0x8C,
    StaAbs = 0x8D,
    StxAbs = 0x8E,
    Illegal8F = 0x8F,
    BccRel = 0x90,
    StaIndY = 0x91,
    Illegal92 = 0x92,
    Illegal93 = 0x93,
    StyZpX = 0x94,
    StaZpX = 0x95,
    StxZpY = 0x96,
    Illegal97 = 0x97,
    TyaImp = 0x98,
    StaAbsY = 0x99,
    TxsImp = 0x9A,
    Illegal9B = 0x9B,
    Illegal9C = 0x9C,
    StaAbsX = 0x9D,
    Illegal9E = 0x9E,
    Illegal9F = 0x9F,
    LdyImm = 0xA0,
    LdaIndX = 0xA1,
    LdxImm = 0xA2,
    IllegalA3 = 0xA3,
    LdyZp = 0xA4,
    LdaZp = 0xA5,
    LdxZp = 0xA6,
    IllegalA7 = 0xA7,
    TayImp = 0xA8,
    LdaImm = 0xA9,
    TaxImp = 0xAA,
    IllegalAB = 0xAB,
    LdyAbs = 0xAC,
    LdaAbs = 0xAD,
    LdxAbs = 0xAE,
    IllegalAF = 0xAF,
    BcsRel = 0xB0,
    LdaIndY = 0xB1,
    IllegalB2 = 0xB2,
    IllegalB3 = 0xB3,
    LdyZpX = 0xB4,
    LdaZpX = 0xB5,
    LdxZpY = 0xB6,
    IllegalB7 = 0xB7,
    ClvImp = 0xB8,
    LdaAbsY = 0xB9,
    TsxImp = 0xBA,
    IllegalBB = 0xBB,
    LdyAbsX = 0xBC,
    LdaAbsX = 0xBD,
    LdxAbsY = 0xBE,
    IllegalBF = 0xBF,
    CpyImm = 0xC0,
    CmpIndX = 0xC1,
    IllegalC2 = 0xC2,
    IllegalC3 = 0xC3,
    CpyZp = 0xC4,
    CmpZp = 0xC5,
    DecZp = 0xC6,
    IllegalC7 = 0xC7,
    InyImp = 0xC8,
    CmpImm = 0xC9,
    DexImp = 0xCA,
    IllegalCB = 0xCB,
    CpyAbs = 0xCC,
    CmpAbs = 0xCD,
    DecAbs = 0xCE,
    IllegalCF = 0xCF,
    BneRel = 0xD0,
    CmpIndY = 0xD1,
    IllegalD2 = 0xD2,
    IllegalD3 = 0xD3,
    IllegalD4 = 0xD4,
    CmpZpX = 0xD5,
    DecZpX = 0xD6,
    IllegalD7 = 0xD7,
    CldImp = 0xD8,
    CmpAbsY = 0xD9,
    IllegalDA = 0xDA,
    IllegalDB = 0xDB,
    IllegalDC = 0xDC,
    CmpAbsX = 0xDD,
    DecAbsX = 0xDE,
    IllegalDF = 0xDF,
    CpxImm = 0xE0,
    SbcIndX = 0xE1,
    IllegalE2 = 0xE2,
    IllegalE3 = 0xE3,
    CpxZp = 0xE4,
    SbcZp = 0xE5,
    IncZp = 0xE6,
    IllegalE7 = 0xE7,
    InxImp = 0xE8,
    SbcImm = 0xE9,
    NopImp = 0xEA,
    IllegalEB = 0xEB,
    CpxAbs = 0xEC,
    SbcAbs = 0xED,
    IncAbs = 0xEE,
    IllegalEF = 0xEF,
    BeqRel = 0xF0,
    SbcIndY = 0xF1,
    IllegalF2 = 0xF2,
    IllegalF3 = 0xF3,
    IllegalF4 = 0xF4,
    SbcZpX = 0xF5,
    IncZpX = 0xF6,
    IllegalF7 = 0xF7,
    SedImp = 0xF8,
    SbcAbsY = 0xF9,
    IllegalFA = 0xFA,
    IllegalFB = 0xFB,
    IllegalFC = 0xFC,
    SbcAbsX = 0xFD,
    IncAbsX = 0xFE,
    IllegalFF = 0xFF,
}
